/* autogenerated by Processing revision 1282 on 2022-05-27 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class main extends PApplet {

//objects
Player p;
Enemy e;
Wall w;
Menu m;
Wall w1, w2, w3, w4;
ArrayList<Wall> walls;
PImage background;

 public void setup() { 
  /* size commented out by preprocessor */;
  surface.setTitle("Group 3");
  //surface.setResizable(true);
  //fullScreen();
  frameRate(60);
  walls = new ArrayList<Wall>();
 
  p = new Player(0, 0, 'a');
  e = new Enemy(0,0,0,0);
  w1 = new Wall((width/2)-90, (height/2) -115, 0, 0);
  w2 = new Wall((width/2)-90, (height/2) -115, 200, 400);
  w3 = new Wall((width/2)-90, (height/2) -115, 0, 200);
  w4 = new Wall((width/2)-90, (height/2) -115, 200, 0);
  walls.add(w1);
  walls.add(w2);
  walls.add(w3);
  walls.add(w4);
  m = new Menu(0, 0);
  
  /* initialize images */
  
  //player
  PImage playerImg = loadImage("images/player.jpeg");
  p.img = playerImg;
  
  //enemy
  PImage enemyImg = loadImage("images/enemy.jpeg");
  e.img = enemyImg;
  /* initialize images */
  p.loader();
  background = loadImage("images/background.jpeg");
}



 public void draw() {
  background(background);
  
    
    //wall display
    w1.display();
    w2.display();
    w3.display();
    w4.display();
  //player movement
  p.move();
  for(Wall w: walls){
    if(p.colDetectRight(w)){
      p.x += 5;
    }
    if(p.colDetectLeft(w)){
      p.x -= 5;
    }
    if(p.colDetectTop(w)){
      p.y -= 5;
    }
    if(p.colDetectBottom(w)){
      p.y += 5;
    }
  }
  
  p.saver();
  
  
  
  //enemy display and movement
  e.display();
  e.huntPlayer(p);
  
  m.display();



}
public class Enemy extends Entity{
  int range;
  int velocity;
  int health;
  int strength;
  int x;
  int y;
  public Enemy(int health, int strength, int x, int y){
    this.health = health;
    this.strength = strength;
    this.x = x;
    this.y = y;
    range = 200;
    velocity = 0;
  }
  public PImage img;
  public void huntPlayer(Player player){
    //move towards player in x axis
    if(x + range > player.x){
      velocity = 1;
      x -=(colDetectLeft(new Wall(1,1,1,1)))?0:velocity;
    }else{
      velocity = 0;
    }
    if(x - range < player.x){
      velocity = 1;
      x +=(colDetectRight(new Wall(1,1,1,1)))?0:velocity;
    }else{
      velocity = 0;
    }
    // move towards player on y axis
    if(y + range > player.y){
      velocity = 1;
      y -=(colDetectTop(new Wall(1,1,1,1)))?0:velocity;
    }else{
      velocity = 0;
    }
    if(y - range < player.y){
      velocity = 1;
      y +=(colDetectBottom(new Wall(1,1,1,1)))?0:velocity;
    }else{
      velocity = 0;
    }
    
  }
  public void takeDamage(int hit){
    if(health > 0){
      health -= hit;
    }
  }
  public void display(){
    image(img, x, y);
  }
}
public class Entity{
  //super class for all characters
  String name;
  int x, y, hp, stamina, r;

  public int attack(int n){
    return n;
  }

  public void attacked(int n){
      hp-=(random(2)==0)?n:0;
  }

  public void move(char directon){}

  public boolean colDetectLeft(Wall wall){
    if(x + r >= wall.x && y >= wall.y && y <= wall.y + wall.h && x - r <= wall.x){
      return true;
    }else{
      return false;
    }
  }
  
  public boolean colDetectRight(Wall wall){
    if(x - r <= wall.x + wall.w && y >= wall.y && y <= wall.y + wall.h && x + r >= wall.x + wall.w){
      return true;
    }else{
      return false;
    }
  }
  
  public boolean colDetectTop(Wall wall){
    if(y + r >= wall.y && x >= wall.x && x <= wall.x + wall.w && y - r <= wall.y){
      return true;
    }else{
      return false;
    }
  }
  
  public boolean colDetectBottom(Wall wall){
    if(y - r <= wall.y + wall.h && x >= wall.x && x <= wall.x + wall.w && y + r >= wall.y + wall.h){
      return true;
    }else{
      return false;
    }
  }
  
}
public class Floor{
  int[][] level; //first dimension: x-position; second: y-position; grid system.
  Enemy[] enemies;
  public Floor(){
    /* implementation not shown */
  }
}
public class Inventory extends UI{ 
  int[][] inventory; //grid (minecraft)
}
public class Menu extends UI{
  int x;
  int y;
  int w;
  int h;
  boolean play = false;
  PImage img;
  public Menu(int x, int y){
    this.x = x;
    this.y = y;
    img = loadImage("images/menu.png");
    w = img.width * 4;
    h = img.height * 4;
  }
  


  
  
  public void display(){
    image(img, x, y);
    //play?
    if (mouseX > (width/2)-100 && mouseX < (width/2)+110 &&  mouseY > (height/2)-110 && mouseY < height/2 -10) {
      if(mousePressed){
        hide();
      }
    }
    //exit?
    if (mouseX > (width/2)-100 && mouseX < (width/2)+110  &&  mouseY > (height/2) +150 && mouseY < height/2 +250) {
     if(mousePressed){
        exit();
     }
    }
  }
  public void hide(){
      x = 1000000;
      y = 1000000;
  }
}
public class Player extends Entity{
  int exp;
  int hunger;
  char rank;
  PImage img;
  String save = "save/save.txt";
 
  
  public Player(int exp, int hunger, char rank){
    this.exp = exp;
    this.hunger = hunger;
    this.rank = rank;
  }
  public boolean toggleInventory(){
    return true;
  }

  public boolean interact(String press){
    if(Character.toString(key)== press){
      return true;
    }else{
      return false;
    }
  }

  //movement
     public void move(){
    int velocity = 0;
    image(img, x, y);
    if(keyPressed){
      velocity = 5;
      switch(key){
        //move up
        case 'w':
        y-= velocity;
        break;
        //move left
        case 'a':
        x-=velocity;
        break;
        //move down
        case 's':
        y+=velocity;
        break;
        //move right
        case 'd':
        x+=velocity;
        break;
        //do nothing (minecraft)
        default:
        velocity = 0;
        break;
       } 
    } 
    
    if(x>width){
      x = -150;
    } 
    if (x<-160){
        x = width;
    }
    
    if(y>height){
      y = -150;
    }
    
    if(y<-160){
      y=height;
    }
  }
  
  public void loader(){
     BufferedReader reader = createReader(save);
     try{
       x = Integer.valueOf(reader.readLine());
       y = Integer.valueOf(reader.readLine());
       reader.close();
     } catch(IOException e){
         e.printStackTrace();
     }
  }
  
  public void saver(){
      PrintWriter writer = createWriter(save);
      writer.println(x + "\n" + y);
      writer.close();  
  }
}
  
class Timer {
  int savedTime;
  int totalTime;
  int passedTime1;
  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }
   public void start() {
    savedTime = millis();
  }
   public boolean finished() {
    int passedTime = millis() - savedTime;
    passedTime1 = passedTime;
    return(passedTime>totalTime)?true:false;
  }
}
public class UI{
  
}
public class Wall{
  int x, y;
  int w, h;
  public Wall(int x, int y, int w, int h){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }

  public void display(){
    rect(x, y, w ,h);
  }
}


  public void settings() { size(1920, 1080); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "main" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
